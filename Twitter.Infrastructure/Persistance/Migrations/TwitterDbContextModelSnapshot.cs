// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Twitter.Infrastructure;

#nullable disable

namespace Twitter.Infrastructure.Persistance.Migrations
{
    [DbContext(typeof(TwitterDbContext))]
    partial class TwitterDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Twitter.Core.Entities.Follower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IdFollower")
                        .HasColumnType("int");

                    b.Property<int?>("UsernameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsernameId");

                    b.ToTable("Follower");
                });

            modelBuilder.Entity("Twitter.Core.Entities.Following", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IdFollowing")
                        .HasColumnType("int");

                    b.Property<int?>("UsernameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsernameId");

                    b.ToTable("Following");
                });

            modelBuilder.Entity("Twitter.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Twitter.Core.Entities.UserFollower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("FollowerId")
                        .HasColumnType("int");

                    b.Property<int>("IdFollower")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FollowerId");

                    b.HasIndex("IdUser");

                    b.ToTable("UserFollowers");
                });

            modelBuilder.Entity("Twitter.Core.Entities.UserFollowing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("FollowingId")
                        .HasColumnType("int");

                    b.Property<int>("IdFollowing")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FollowingId");

                    b.HasIndex("IdUser");

                    b.ToTable("UserFollowings");
                });

            modelBuilder.Entity("Twitter.Core.Entities.UserTweet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdTweet")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<int?>("UsernameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdTweet");

                    b.HasIndex("UsernameId");

                    b.ToTable("UserTweets");
                });

            modelBuilder.Entity("Twitter.Core.Entities.Follower", b =>
                {
                    b.HasOne("Twitter.Core.Entities.User", "Username")
                        .WithMany()
                        .HasForeignKey("UsernameId");

                    b.Navigation("Username");
                });

            modelBuilder.Entity("Twitter.Core.Entities.Following", b =>
                {
                    b.HasOne("Twitter.Core.Entities.User", "Username")
                        .WithMany()
                        .HasForeignKey("UsernameId");

                    b.Navigation("Username");
                });

            modelBuilder.Entity("Twitter.Core.Entities.UserFollower", b =>
                {
                    b.HasOne("Twitter.Core.Entities.Follower", "Follower")
                        .WithMany()
                        .HasForeignKey("FollowerId");

                    b.HasOne("Twitter.Core.Entities.User", null)
                        .WithMany("Followers")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Twitter.Core.Entities.UserFollowing", b =>
                {
                    b.HasOne("Twitter.Core.Entities.Following", "Following")
                        .WithMany()
                        .HasForeignKey("FollowingId");

                    b.HasOne("Twitter.Core.Entities.User", null)
                        .WithMany("Following")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Following");
                });

            modelBuilder.Entity("Twitter.Core.Entities.UserTweet", b =>
                {
                    b.HasOne("Twitter.Core.Entities.User", null)
                        .WithMany("Tweets")
                        .HasForeignKey("IdTweet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Twitter.Core.Entities.User", "Username")
                        .WithMany()
                        .HasForeignKey("UsernameId");

                    b.Navigation("Username");
                });

            modelBuilder.Entity("Twitter.Core.Entities.User", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("Tweets");
                });
#pragma warning restore 612, 618
        }
    }
}
